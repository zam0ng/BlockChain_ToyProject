%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 498
%%HiResBoundingBox: 0 0 2382 497.03998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2382 497.03998 re
W
q
[0.24 0 0 -0.24 0 497.03998] cm
q
0 0 9924.999 2068.0986 re
W*
q
[26.284176 0 0 26.27774 1345.35083 1257.68628] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
13.82 14.020001 m
9.799999 20 l
7.619999 20 l
7.619999 5.08 l
9.799999 5.08 l
9.799999 16.220001 l
17.379999 5.080001 l
20 5.080001 l
15.1 12.1 l
17.780001 16.120001 l
18.206667 16.760002 18.626667 17.213335 19.040001 17.480001 c
19.373335 17.693335 19.726667 17.800001 20.1 17.800001 c
20.720001 17.780001 l
20.720001 20 l
20.320002 20 l
19.653336 20.013334 19.166668 19.986668 18.860001 19.92 c
18.366667 19.84 17.913334 19.639999 17.5 19.32 c
17.033333 18.946667 16.56 18.386667 16.08 17.639999 c
13.82 14.020001 l
h
37.02 12.44 m
37.02 11.373333 36.746666 10.406666 36.200001 9.539999 c
35.68 8.699999 34.970001 8.039999 34.07 7.559999 c
33.169998 7.079999 32.193333 6.839999 31.139999 6.839999 c
30.046667 6.839999 29.049999 7.086666 28.15 7.579999 c
27.25 8.073332 26.546665 8.746665 26.039999 9.599999 c
25.519999 10.493332 25.259998 11.486665 25.259998 12.579998 c
25.259998 13.619998 25.539999 14.579998 26.099998 15.459998 c
26.633331 16.286665 27.349998 16.943333 28.249998 17.429998 c
29.149998 17.916664 30.123331 18.159998 31.169998 18.159998 c
32.216663 18.159998 33.189999 17.906664 34.089996 17.399998 c
34.989994 16.893332 35.699997 16.213331 36.219997 15.359998 c
36.75333 14.466664 37.019997 13.493331 37.019997 12.439998 c
37.02 12.44 l
h
39.18 12.56 m
39.18 14 38.806667 15.326667 38.060001 16.540001 c
37.34 17.700001 36.363335 18.623335 35.130001 19.310001 c
33.896667 19.996668 32.566669 20.340002 31.140001 20.340002 c
29.660002 20.340002 28.300001 19.980001 27.060001 19.260002 c
25.846668 18.566668 24.893335 17.613335 24.200001 16.400001 c
23.480001 15.160002 23.120001 13.800002 23.120001 12.320002 c
23.120001 10.893334 23.5 9.580001 24.26 8.380001 c
24.98 7.233334 25.956667 6.323334 27.190001 5.650001 c
28.423334 4.976668 29.746668 4.640001 31.16 4.640001 c
32.613335 4.640001 33.959999 4.993335 35.200001 5.700001 c
36.413334 6.393334 37.373333 7.333334 38.080002 8.520001 c
38.813335 9.760001 39.18 11.106668 39.18 12.560001 c
39.18 12.56 l
h
44.759998 7.26 m
44.759998 12.22 l
45.173332 11.980001 45.633331 11.820001 46.139999 11.74 c
46.513332 11.673333 46.993332 11.639999 47.579998 11.639999 c
50.419998 11.639999 l
51.206665 11.639999 51.82 11.459999 52.259998 11.099999 c
52.726665 10.713333 52.959999 10.133333 52.959999 9.36 c
52.959999 8.626666 52.713333 8.079999 52.219997 7.719999 c
51.793331 7.413333 51.193333 7.259999 50.419998 7.259999 c
44.759998 7.259999 l
44.759998 7.26 l
h
51.139999 17.639999 m
49.32 13.82 l
47.579998 13.82 l
47.033333 13.82 46.553333 13.853334 46.139999 13.92 c
45.633335 14.013333 45.173332 14.173333 44.759998 14.4 c
44.759998 20 l
42.579998 20 l
42.579998 5.08 l
50.419998 5.08 l
51.34 5.08 52.153332 5.253333 52.859997 5.6 c
53.566662 5.946667 54.113327 6.44 54.499996 7.08 c
54.91333 7.76 55.119995 8.56 55.119995 9.48 c
55.119995 10.599999 54.819996 11.52 54.219994 12.24 c
53.619991 12.96 52.773327 13.46 51.679993 13.74 c
52.839993 16.119999 l
53.173325 16.613333 53.433327 16.959999 53.619991 17.16 c
53.846657 17.413332 54.063324 17.583332 54.269993 17.67 c
54.476662 17.756668 54.746662 17.800001 55.079994 17.799999 c
55.299995 17.799999 l
55.779995 17.779999 l
55.779995 19.999998 l
55.00666 19.999998 54.433327 19.973331 54.059994 19.919998 c
53.433327 19.813332 52.899994 19.606665 52.459995 19.299997 c
51.939995 18.926664 51.499996 18.373331 51.139996 17.639997 c
51.139999 17.639999 l
h
61.560001 14.020001 m
61.560001 17.82 l
70.760002 17.82 l
70.760002 20 l
59.380001 20 l
59.380001 5.08 l
69.880005 5.08 l
69.880005 7.28 l
61.560005 7.28 l
61.560005 11.799999 l
61.973339 11.56 62.433338 11.4 62.940006 11.32 c
63.313339 11.253333 63.793339 11.219999 64.380005 11.219999 c
67.640007 11.219999 l
67.640007 13.44 l
64.380005 13.44 l
63.83334 13.44 63.35334 13.473333 62.940006 13.54 c
62.433342 13.633333 61.973339 13.793334 61.560005 14.020001 c
61.560001 14.020001 l
h
78.919998 6.66 m
78.099998 4.82 l
80.5 4.82 l
87.68 20 l
85.239998 20 l
84.259995 17.82 l
79.719994 17.82 l
78.866661 17.82 78.099991 17.9 77.419991 18.059999 c
76.819992 18.206665 76.319992 18.4 75.919991 18.639999 c
75.55999 18.853333 75.319992 19.073332 75.199989 19.299999 c
74.819992 20 l
72.459991 20 l
78.919998 6.66 l
h
80.519997 15.62 m
83.279999 15.62 l
80.019997 9.32 l
76.719994 16.459999 l
77.013329 16.206667 77.459991 16.006666 78.05999 15.859999 c
78.73999 15.699999 79.55999 15.619999 80.519989 15.619999 c
80.519997 15.62 l
h
90.919998 7.18 m
89.18 5.08 l
92 5.08 l
101.580002 16.479999 l
101.580002 5.08 l
103.779999 5.08 l
103.779999 20 l
101.619995 20 l
93.059998 9.74 l
93.059998 20 l
90.919998 20 l
90.919998 7.18 l
90.919998 7.18 l
h
115.779999 7.26 m
115.779999 12.22 l
116.193336 11.980001 116.653336 11.820001 117.159996 11.74 c
117.533325 11.673333 118.013329 11.639999 118.599998 11.639999 c
121.440002 11.639999 l
122.226669 11.639999 122.840004 11.459999 123.279999 11.099999 c
123.746666 10.713333 123.979996 10.133333 123.979996 9.36 c
123.979996 8.626666 123.73333 8.079999 123.239998 7.719999 c
122.813332 7.413333 122.213333 7.259999 121.439995 7.259999 c
115.779999 7.259999 l
115.779999 7.26 l
h
122.160004 17.639999 m
120.340004 13.82 l
118.600006 13.82 l
118.053337 13.82 117.573341 13.853334 117.160004 13.92 c
116.653336 14.013333 116.193336 14.173333 115.780006 14.4 c
115.780006 20 l
113.600006 20 l
113.600006 5.08 l
121.440002 5.08 l
122.360001 5.08 123.173332 5.253333 123.880005 5.6 c
124.586678 5.946667 125.133339 6.44 125.520004 7.08 c
125.933342 7.76 126.140007 8.56 126.140007 9.48 c
126.140007 10.599999 125.840004 11.52 125.240005 12.24 c
124.640007 12.96 123.793335 13.46 122.700005 13.74 c
123.860008 16.119999 l
124.193344 16.613333 124.453339 16.959999 124.640007 17.16 c
124.866669 17.413332 125.083336 17.583332 125.290009 17.67 c
125.496681 17.756668 125.766678 17.800001 126.100006 17.799999 c
126.320007 17.799999 l
126.800011 17.779999 l
126.800011 19.999998 l
126.026672 19.999998 125.453339 19.973331 125.080009 19.919998 c
124.453339 19.813332 123.920006 19.606665 123.480011 19.299997 c
122.960014 18.926664 122.520012 18.373331 122.160011 17.639997 c
122.160004 17.639999 l
h
132.580002 14.020001 m
132.580002 17.82 l
141.779999 17.82 l
141.779999 20 l
130.399994 20 l
130.399994 5.08 l
140.899994 5.08 l
140.899994 7.28 l
132.579987 7.28 l
132.579987 11.799999 l
132.993317 11.56 133.453323 11.4 133.959991 11.32 c
134.333328 11.253333 134.813324 11.219999 135.399994 11.219999 c
138.659988 11.219999 l
138.659988 13.44 l
135.399994 13.44 l
134.853317 13.44 134.373322 13.473333 133.959991 13.54 c
133.453323 13.633333 132.993332 13.793334 132.579987 14.020001 c
132.580002 14.020001 l
h
156.880005 15.46 m
156.880005 16.433334 156.58667 17.299999 156 18.059999 c
155.426666 18.779999 154.636673 19.34 153.630005 19.74 c
152.623337 20.139999 151.486679 20.34 150.220001 20.34 c
149.059998 20.34 147.933334 20.07 146.839996 19.530001 c
145.746658 18.990002 144.82666 18.240002 144.080002 17.280001 c
145.639999 15.820001 l
146.933334 17.380001 148.460007 18.16 150.220001 18.16 c
150.993332 18.16 151.699997 18.066666 152.339996 17.879999 c
153.046661 17.666666 153.593323 17.366667 153.979996 16.98 c
154.419998 16.553333 154.639999 16.046667 154.639999 15.459999 c
154.639999 14.753333 154.419998 14.219999 153.979996 13.859999 c
153.606659 13.553332 153.053329 13.353332 152.319992 13.259998 c
151.893326 13.206665 151.193329 13.179998 150.219986 13.179998 c
148.433319 13.179998 147.069992 12.853332 146.12999 12.199999 c
145.189987 11.546666 144.719986 10.586666 144.719986 9.319999 c
144.719986 8.519999 144.95665 7.759999 145.429993 7.039999 c
145.903336 6.319999 146.553329 5.746666 147.37999 5.319999 c
148.233322 4.866665 149.179993 4.639999 150.219986 4.639999 c
151.393311 4.639999 152.453308 4.819999 153.399979 5.179999 c
154.413315 5.566666 155.353317 6.173332 156.219986 6.999999 c
154.859985 8.599999 l
154.046646 7.946666 153.306656 7.489999 152.639984 7.23 c
151.973312 6.97 151.166656 6.84 150.219986 6.84 c
149.673309 6.84 149.163315 6.953333 148.689987 7.18 c
148.21666 7.406667 147.839996 7.71 147.559982 8.09 c
147.279968 8.47 147.139969 8.873333 147.139984 9.3 c
147.139984 10.446667 148.199982 11.020001 150.319977 11.020001 c
152.013306 11.020001 153.353302 11.193334 154.339981 11.540001 c
155.273315 11.873334 155.939972 12.380001 156.339981 13.060001 c
156.699982 13.660001 156.879974 14.460001 156.879974 15.460001 c
156.880005 15.46 l
h
171.17999 7.28 m
165.919998 7.28 l
165.919998 20 l
163.800003 20 l
163.800003 7.28 l
158.479996 7.28 l
158.479996 5.08 l
171.17999 5.08 l
171.17999 7.28 l
171.17999 7.28 l
h
178.64 6.66 m
177.81999 4.82 l
180.21999 4.82 l
187.39998 20 l
184.95998 20 l
183.97998 17.82 l
179.43999 17.82 l
178.58665 17.82 177.81999 17.9 177.13998 18.059999 c
176.53999 18.206665 176.03999 18.4 175.63998 18.639999 c
175.27998 18.853333 175.03999 19.073332 174.91998 19.299999 c
174.53998 20 l
172.17998 20 l
178.64 6.66 l
h
180.24001 15.62 m
183 15.62 l
179.74001 9.32 l
176.44 16.459999 l
176.73334 16.206667 177.18001 16.006666 177.78 15.859999 c
178.46001 15.699999 179.28 15.619999 180.24001 15.619999 c
180.24001 15.62 l
h
196.7 20.34 m
195.29999 20.34 194.09666 20.096666 193.09 19.610001 c
192.08333 19.123335 191.31667 18.42 190.78999 17.5 c
190.26332 16.58 189.99998 15.48 190 14.2 c
190 5.08 l
192.16 5.08 l
192.16 14.2 l
192.16 15.48 192.55333 16.459999 193.34 17.139999 c
194.12666 17.82 195.24666 18.16 196.7 18.16 c
198.15334 18.16 199.27333 17.82 200.06 17.139999 c
200.84666 16.459999 201.23999 15.479999 201.23999 14.199999 c
201.23999 5.079999 l
203.39999 5.079999 l
203.39999 14.199999 l
203.39999 15.479999 203.13666 16.579998 202.61 17.499998 c
202.08334 18.419998 201.31667 19.123331 200.31 19.609999 c
199.30333 20.096666 198.09999 20.34 196.7 20.339998 c
196.7 20.34 l
h
209.78 7.26 m
209.78 12.22 l
210.19333 11.980001 210.65334 11.820001 211.16 11.74 c
211.53334 11.673333 212.01334 11.639999 212.60001 11.639999 c
215.44 11.639999 l
216.22667 11.639999 216.84 11.459999 217.28 11.099999 c
217.74666 10.713333 217.98 10.133333 217.98 9.36 c
217.98 8.626666 217.73332 8.079999 217.23999 7.719999 c
216.81332 7.413333 216.21332 7.259999 215.43999 7.259999 c
209.77998 7.259999 l
209.78 7.26 l
h
216.16 17.639999 m
214.34 13.82 l
212.59999 13.82 l
212.05331 13.82 211.57332 13.853334 211.15999 13.92 c
210.65332 14.013333 210.19333 14.173333 209.77998 14.4 c
209.77998 20 l
207.59999 20 l
207.59999 5.08 l
215.43999 5.08 l
216.35999 5.08 217.17332 5.253333 217.87999 5.6 c
218.58665 5.946667 219.13332 6.44 219.51999 7.08 c
219.93332 7.76 220.13998 8.56 220.13998 9.48 c
220.13998 10.599999 219.83998 11.52 219.23999 12.24 c
218.64 12.96 217.79333 13.46 216.7 13.74 c
217.86 16.119999 l
218.19333 16.613333 218.45334 16.959999 218.64 17.16 c
218.86667 17.413332 219.08333 17.583332 219.28999 17.67 c
219.49666 17.756668 219.76666 17.800001 220.09999 17.799999 c
220.31999 17.799999 l
220.79999 17.779999 l
220.79999 19.999998 l
220.02666 19.999998 219.45332 19.973331 219.07999 19.919998 c
218.45332 19.813332 217.91998 19.606665 217.47998 19.299997 c
216.95998 18.926664 216.51997 18.373331 216.15997 17.639997 c
216.16 17.639999 l
h
229.06 6.66 m
228.23999 4.82 l
230.63998 4.82 l
237.81998 20 l
235.37997 20 l
234.39998 17.82 l
229.85999 17.82 l
229.00665 17.82 228.23999 17.9 227.55998 18.059999 c
226.95999 18.206665 226.45999 18.4 226.05998 18.639999 c
225.69998 18.853333 225.45999 19.073332 225.33998 19.299999 c
224.95998 20 l
222.59998 20 l
229.06 6.66 l
h
230.66 15.62 m
233.42 15.62 l
230.16 9.32 l
226.86 16.459999 l
227.15334 16.206667 227.60001 16.006666 228.2 15.859999 c
228.88 15.699999 229.7 15.619999 230.66 15.619999 c
230.66 15.62 l
h
241.06 7.18 m
239.31999 5.08 l
242.14 5.08 l
251.72 16.479999 l
251.72 5.08 l
253.92 5.08 l
253.92 20 l
251.75999 20 l
243.2 9.74 l
243.2 20 l
241.06 20 l
241.06 7.18 l
241.06 7.18 l
h
269.42001 7.28 m
264.16 7.28 l
264.16 20 l
262.04001 20 l
262.04001 7.28 l
256.72 7.28 l
256.72 5.08 l
269.42001 5.08 l
269.42001 7.28 l
269.42001 7.28 l
h
f
Q
q
[56.762257 0 0 56.748363 242.02232 -50.947506] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
14.16 6 m
8.84 14.04 l
8.84 20 l
5.92 20 l
5.92 14.04 l
0.6 6 l
3.9 6 l
7.38 11.4 l
10.860001 6 l
14.160001 6 l
14.16 6 l
h
22.92 5.8 m
26.82 5.8 30.18 8.74 30.18 13 c
30.18 17.26 26.82 20.200001 22.92 20.200001 c
19.02 20.200001 15.66 17.26 15.66 13.000001 c
15.66 8.740002 19.02 5.800001 22.92 5.800001 c
22.92 5.8 l
h
22.92 17.459999 m
25.280001 17.459999 27.139999 15.599999 27.139999 12.999999 c
27.139999 10.399999 25.279999 8.539999 22.92 8.539999 c
20.560001 8.539999 18.700001 10.399999 18.700001 12.999999 c
18.700001 15.599999 20.560001 17.459999 22.92 17.459999 c
h
40.18 6 m
43.099998 6 l
43.099998 14.92 l
43.099998 18.32 40.639999 20.299999 37.699997 20.299999 c
34.759995 20.299999 32.279999 18.32 32.279999 14.919999 c
32.279999 5.999999 l
35.199997 5.999999 l
35.199997 14.94 l
35.199997 16.98 36.539997 17.559999 37.699997 17.559999 c
38.839996 17.559999 40.179996 16.98 40.179996 14.94 c
40.179996 5.999999 l
40.18 6 l
h
54.66 6 m
57.580002 6 l
57.580002 20 l
55.360001 20 l
48.420002 11.32 l
48.420002 20 l
45.5 20 l
45.5 6 l
47.759998 6 l
54.66 14.7 l
54.66 6 l
h
73.160004 12.56 m
73.780006 17.26 70.720001 20.200001 66.940002 20.200001 c
62.960003 20.200001 59.68 17.26 59.68 13.000001 c
59.68 8.740002 63.040001 5.800001 66.940002 5.800001 c
68.800003 5.800001 70.440002 6.400001 71.639999 7.460001 c
69.879997 9.440001 l
69.139999 8.92 68.139999 8.540001 67.119995 8.540001 c
64.579994 8.540001 62.719994 10.400001 62.719994 13.000001 c
62.719994 15.600001 64.519997 17.460001 66.939995 17.460001 c
68.779991 17.460001 70.059998 16.800001 70.459991 15.040001 c
67.159988 15.040001 l
67.159988 12.560001 l
73.159988 12.560001 l
73.160004 12.56 l
h
79.900002 5.76 m
82.360001 5.76 83.919998 7.3 84.660004 8.66 c
82.5 9.94 l
81.739998 8.879999 81 8.339999 79.900002 8.339999 c
78.919998 8.339999 78.200005 8.919999 78.200005 9.719999 c
78.200005 10.52 78.660004 10.94 79.760002 11.339999 c
80.720001 11.679999 l
83.82 12.78 85.040001 14.16 85.040001 16.08 c
85.040001 18.9 82.360001 20.299999 79.980003 20.299999 c
77.460007 20.299999 75.5 18.799999 74.820007 16.84 c
77.060005 15.66 l
77.560005 16.68 78.400002 17.66 79.980003 17.66 c
81.120003 17.66 82 17.16 82 16.119999 c
82 15.119999 81.400002 14.679998 79.879997 14.099999 c
79.019997 13.799998 l
76.959999 13.059999 75.299995 12.039998 75.299995 9.599999 c
75.299995 7.359999 77.399994 5.759998 79.899994 5.759998 c
79.900002 5.76 l
h
89.860001 6 m
89.860001 20 l
86.940002 20 l
86.940002 6 l
89.860001 6 l
h
101.32 20 m
96.979996 14 l
95.259995 15.96 l
95.259995 20 l
92.259995 20 l
92.259995 6 l
95.259995 6 l
95.259995 12.1 l
100.439995 6.000001 l
104.039993 6.000001 l
98.779991 11.960001 l
104.679993 20 l
101.319992 20 l
101.32 20 l
h
111.379997 6 m
115.360001 6 118.479996 9.12 118.479996 12.92 c
118.479996 16.880001 115.359993 20 111.379997 20 c
106.379997 20 l
106.379997 6 l
111.379997 6 l
h
111.360001 17.24 m
114.040001 17.24 115.480003 15.299999 115.480003 12.92 c
115.480003 10.7 114.040001 8.76 111.360001 8.76 c
109.300003 8.76 l
109.300003 17.24 l
111.360001 17.24 l
h
f
Q
q
[10.316542 0 0 10.314016 6989.8809 172.78282] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
50 10 m
10 90 l
90 90 l
50 10 l
h
50 24.909 m
72.545998 70 l
42.360001 70 l
45.693001 63.333 l
61.757 63.333 l
50 39.813999 l
31.575001 76.667 l
75.878998 76.667 l
79.211998 83.333 l
20.788 83.333 l
50 24.909 l
h
f
Q
q
[57.314125 0 0 57.300091 7990.2363 -56.417595] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
10.36 6 m
13.28 6 l
13.28 20 l
11.06 20 l
4.119999 11.32 l
4.119999 20 l
1.199999 20 l
1.199999 6 l
3.459999 6 l
10.36 14.7 l
10.36 6 l
h
28.860001 12.56 m
29.480001 17.26 26.42 20.200001 22.640001 20.200001 c
18.660002 20.200001 15.380001 17.26 15.380001 13.000001 c
15.380001 8.740002 18.740002 5.800001 22.640001 5.800001 c
24.500002 5.800001 26.140001 6.400001 27.34 7.460001 c
25.58 9.440001 l
24.84 8.92 23.84 8.540001 22.82 8.540001 c
20.279999 8.540001 18.42 10.400001 18.42 13.000001 c
18.42 15.600001 20.219999 17.460001 22.639999 17.460001 c
24.48 17.460001 25.759998 16.800001 26.16 15.040001 c
22.860001 15.040001 l
22.860001 12.560001 l
28.860001 12.560001 l
28.860001 12.56 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
